{
  "cat": "\n  cat([options,] file [, file ...])\n  cat([options,] file_array)\n\n Available options:\n\n + `-n`: number all output lines\n\n Examples:\n\n ```javascript\n var str = cat('file*.txt');\n var str = cat('file1', 'file2');\n var str = cat(['file1', 'file2']); // same as above\n ```\n\n Returns a string containing the given file, or a concatenated string\n containing the files if more than one file is given (a new line character is\n introduced between each file).\n",
  "cd": "\n  cd([dir])\n\n Changes to directory `dir` for the duration of the script. Changes to home\n directory if no argument is supplied.\n",
  "chmod": "\n  chmod([options,] octal_mode || octal_string, file)\n  chmod([options,] symbolic_mode, file)\n\n Available options:\n\n + `-v`: output a diagnostic for every file processed\n + `-c`: like verbose, but report only when a change is made\n + `-R`: change files and directories recursively\n\n Examples:\n\n ```javascript\n chmod(755, '/Users/brandon');\n chmod('755', '/Users/brandon'); // same as above\n chmod('u+x', '/Users/brandon');\n chmod('-R', 'a-w', '/Users/brandon');\n ```\n\n Alters the permissions of a file or directory by either specifying the\n absolute permissions in octal form or expressing the changes in symbols.\n This command tries to mimic the POSIX behavior as much as possible.\n Notable exceptions:\n\n + In symbolic modes, `a-r` and `-r` are identical.  No consideration is\n   given to the `umask`.\n + There is no \"quiet\" option, since default behavior is to run silent.\n",
  "cp": "\n  cp([options,] source [, source ...], dest)\n  cp([options,] source_array, dest)\n\n Available options:\n\n + `-f`: force (default behavior)\n + `-n`: no-clobber\n + `-u`: only copy if `source` is newer than `dest`\n + `-r`, `-R`: recursive\n + `-L`: follow symlinks\n + `-P`: don't follow symlinks\n\n Examples:\n\n ```javascript\n cp('file1', 'dir1');\n cp('-R', 'path/to/dir/', '~/newCopy/');\n cp('-Rf', '/tmp/*', '/usr/local/*', '/home/tmp');\n cp('-Rf', ['/tmp/*', '/usr/local/*'], '/home/tmp'); // same as above\n ```\n\n Copies files.\n",
  "dirs": "\n  pushd([options,] [dir | '-N' | '+N'])\n\n Available options:\n\n + `-n`: Suppresses the normal change of directory when adding directories to the stack, so that only the stack is manipulated.\n + `-q`: Supresses output to the console.\n\n Arguments:\n\n + `dir`: Sets the current working directory to the top of the stack, then executes the equivalent of `cd dir`.\n + `+N`: Brings the Nth directory (counting from the left of the list printed by dirs, starting with zero) to the top of the list by rotating the stack.\n + `-N`: Brings the Nth directory (counting from the right of the list printed by dirs, starting with zero) to the top of the list by rotating the stack.\n\n Examples:\n\n ```javascript\n // process.cwd() === '/usr'\n pushd('/etc'); // Returns /etc /usr\n pushd('+1');   // Returns /usr /etc\n ```\n\n Save the current directory on the top of the directory stack and then `cd` to `dir`. With no arguments, `pushd` exchanges the top two directories. Returns an array of paths in the stack.\n\n\n  popd([options,] ['-N' | '+N'])\n\n Available options:\n\n + `-n`: Suppress the normal directory change when removing directories from the stack, so that only the stack is manipulated.\n + `-q`: Supresses output to the console.\n\n Arguments:\n\n + `+N`: Removes the Nth directory (counting from the left of the list printed by dirs), starting with zero.\n + `-N`: Removes the Nth directory (counting from the right of the list printed by dirs), starting with zero.\n\n Examples:\n\n ```javascript\n echo(process.cwd()); // '/usr'\n pushd('/etc');       // '/etc /usr'\n echo(process.cwd()); // '/etc'\n popd();              // '/usr'\n echo(process.cwd()); // '/usr'\n ```\n\n When no arguments are given, `popd` removes the top directory from the stack and performs a `cd` to the new top directory. The elements are numbered from 0, starting at the first directory listed with dirs (i.e., `popd` is equivalent to `popd +0`). Returns an array of paths in the stack.\n\n\n  dirs([options | '+N' | '-N'])\n\n Available options:\n\n + `-c`: Clears the directory stack by deleting all of the elements.\n + `-q`: Supresses output to the console.\n\n Arguments:\n\n + `+N`: Displays the Nth directory (counting from the left of the list printed by dirs when invoked without options), starting with zero.\n + `-N`: Displays the Nth directory (counting from the right of the list printed by dirs when invoked without options), starting with zero.\n\n Display the list of currently remembered directories. Returns an array of paths in the stack, or a single path if `+N` or `-N` was specified.\n\n See also: `pushd`, `popd`\n",
  "echo": "\n  echo([options,] string [, string ...])\n\n Available options:\n\n + `-e`: interpret backslash escapes (default)\n + `-n`: remove trailing newline from output\n\n Examples:\n\n ```javascript\n echo('hello world');\n var str = echo('hello world');\n echo('-n', 'no newline at end');\n ```\n\n Prints `string` to stdout, and returns string with additional utility methods\n like `.to()`.\n",
  "exec": "\n  exec(command [, options] [, callback])\n\n Available options:\n\n + `async`: Asynchronous execution. If a callback is provided, it will be set to\n   `true`, regardless of the passed value (default: `false`).\n + `silent`: Do not echo program output to console (default: `false`).\n + `encoding`: Character encoding to use. Affects the values returned to stdout and stderr, and\n   what is written to stdout and stderr when not in silent mode (default: `'utf8'`).\n + and any option available to Node.js's\n   [`child_process.exec()`](https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback)\n\n Examples:\n\n ```javascript\n var version = exec('node --version', {silent:true}).stdout;\n\n var child = exec('some_long_running_process', {async:true});\n child.stdout.on('data', function(data) {\n   /* ... do something with data ... */\n });\n\n exec('some_long_running_process', function(code, stdout, stderr) {\n   console.log('Exit code:', code);\n   console.log('Program output:', stdout);\n   console.log('Program stderr:', stderr);\n });\n ```\n\n Executes the given `command` _synchronously_, unless otherwise specified.  When in synchronous\n mode, this returns a `ShellString` (compatible with ShellJS v0.6.x, which returns an object\n of the form `{ code:..., stdout:... , stderr:... }`). Otherwise, this returns the child process\n object, and the `callback` receives the arguments `(code, stdout, stderr)`.\n\n Not seeing the behavior you want? `exec()` runs everything through `sh`\n by default (or `cmd.exe` on Windows), which differs from `bash`. If you\n need bash-specific behavior, try out the `{shell: 'path/to/bash'}` option.\n",
  "find": "\n  find(path [, path ...])\n  find(path_array)\n\n Examples:\n\n ```javascript\n find('src', 'lib');\n find(['src', 'lib']); // same as above\n find('.').filter(function(file) { return file.match(/\\.js$/); });\n ```\n\n Returns array of all files (however deep) in the given paths.\n\n The main difference from `ls('-R', path)` is that the resulting file names\n include the base directories (e.g., `lib/resources/file1` instead of just `file1`).\n",
  "grep": "\n  grep([options,] regex_filter, file [, file ...])\n  grep([options,] regex_filter, file_array)\n\n Available options:\n\n + `-v`: Invert `regex_filter` (only print non-matching lines).\n + `-l`: Print only filenames of matching files.\n + `-i`: Ignore case.\n\n Examples:\n\n ```javascript\n grep('-v', 'GLOBAL_VARIABLE', '*.js');\n grep('GLOBAL_VARIABLE', '*.js');\n ```\n\n Reads input string from given files and returns a string containing all lines of the\n file that match the given `regex_filter`.\n",
  "head": "\n  head([{'-n': \\<num\\>},] file [, file ...])\n  head([{'-n': \\<num\\>},] file_array)\n\n Available options:\n\n + `-n <num>`: Show the first `<num>` lines of the files\n\n Examples:\n\n ```javascript\n var str = head({'-n': 1}, 'file*.txt');\n var str = head('file1', 'file2');\n var str = head(['file1', 'file2']); // same as above\n ```\n\n Read the start of a file.\n",
  "ln": "\n  ln([options,] source, dest)\n\n Available options:\n\n + `-s`: symlink\n + `-f`: force\n\n Examples:\n\n ```javascript\n ln('file', 'newlink');\n ln('-sf', 'file', 'existing');\n ```\n\n Links `source` to `dest`. Use `-f` to force the link, should `dest` already exist.\n",
  "ls": "\n  ls([options,] [path, ...])\n  ls([options,] path_array)\n\n Available options:\n\n + `-R`: recursive\n + `-A`: all files (include files beginning with `.`, except for `.` and `..`)\n + `-L`: follow symlinks\n + `-d`: list directories themselves, not their contents\n + `-l`: list objects representing each file, each with fields containing `ls\n         -l` output fields. See\n         [`fs.Stats`](https://nodejs.org/api/fs.html#fs_class_fs_stats)\n         for more info\n\n Examples:\n\n ```javascript\n ls('projs/*.js');\n ls('-R', '/users/me', '/tmp');\n ls('-R', ['/users/me', '/tmp']); // same as above\n ls('-l', 'file.txt'); // { name: 'file.txt', mode: 33188, nlink: 1, ...}\n ```\n\n Returns array of files in the given `path`, or files in\n the current directory if no `path` is  provided.\n",
  "mkdir": "\n  mkdir([options,] dir [, dir ...])\n  mkdir([options,] dir_array)\n\n Available options:\n\n + `-p`: full path (and create intermediate directories, if necessary)\n\n Examples:\n\n ```javascript\n mkdir('-p', '/tmp/a/b/c/d', '/tmp/e/f/g');\n mkdir('-p', ['/tmp/a/b/c/d', '/tmp/e/f/g']); // same as above\n ```\n\n Creates directories.\n",
  "mv": "\n  mv([options ,] source [, source ...], dest')\n  mv([options ,] source_array, dest')\n\n Available options:\n\n + `-f`: force (default behavior)\n + `-n`: no-clobber\n\n Examples:\n\n ```javascript\n mv('-n', 'file', 'dir/');\n mv('file1', 'file2', 'dir/');\n mv(['file1', 'file2'], 'dir/'); // same as above\n ```\n\n Moves `source` file(s) to `dest`.\n",
  "pwd": "\n  pwd()\n\n Returns the current directory.\n",
  "rm": "\n  rm([options,] file [, file ...])\n  rm([options,] file_array)\n\n Available options:\n\n + `-f`: force\n + `-r, -R`: recursive\n\n Examples:\n\n ```javascript\n rm('-rf', '/tmp/*');\n rm('some_file.txt', 'another_file.txt');\n rm(['some_file.txt', 'another_file.txt']); // same as above\n ```\n\n Removes files.\n",
  "sed": "\n  sed([options,] search_regex, replacement, file [, file ...])\n  sed([options,] search_regex, replacement, file_array)\n\n Available options:\n\n + `-i`: Replace contents of `file` in-place. _Note that no backups will be created!_\n\n Examples:\n\n ```javascript\n sed('-i', 'PROGRAM_VERSION', 'v0.1.3', 'source.js');\n sed(/.*DELETE_THIS_LINE.*\\n/, '', 'source.js');\n ```\n\n Reads an input string from `file`s, and performs a JavaScript `replace()` on the input\n using the given `search_regex` and `replacement` string or function. Returns the new string after replacement.\n\n Note:\n\n Like unix `sed`, ShellJS `sed` supports capture groups. Capture groups are specified\n using the `$n` syntax:\n\n ```javascript\n sed(/(\\w+)\\s(\\w+)/, '$2, $1', 'file.txt');\n ```\n",
  "set": "\n  set(options)\n\n Available options:\n\n + `+/-e`: exit upon error (`config.fatal`)\n + `+/-v`: verbose: show all commands (`config.verbose`)\n + `+/-f`: disable filename expansion (globbing)\n\n Examples:\n\n ```javascript\n set('-e'); // exit upon first error\n set('+e'); // this undoes a \"set('-e')\"\n ```\n\n Sets global configuration variables.\n",
  "sort": "\n  sort([options,] file [, file ...])\n  sort([options,] file_array)\n\n Available options:\n\n + `-r`: Reverse the results\n + `-n`: Compare according to numerical value\n\n Examples:\n\n ```javascript\n sort('foo.txt', 'bar.txt');\n sort('-r', 'foo.txt');\n ```\n\n Return the contents of the `file`s, sorted line-by-line. Sorting multiple\n files mixes their content (just as unix `sort` does).\n",
  "tail": "\n  tail([{'-n': \\<num\\>},] file [, file ...])\n  tail([{'-n': \\<num\\>},] file_array)\n\n Available options:\n\n + `-n <num>`: Show the last `<num>` lines of `file`s\n\n Examples:\n\n ```javascript\n var str = tail({'-n': 1}, 'file*.txt');\n var str = tail('file1', 'file2');\n var str = tail(['file1', 'file2']); // same as above\n ```\n\n Read the end of a `file`.\n",
  "tempdir": "\n  tempdir()\n\n Examples:\n\n ```javascript\n var tmp = tempdir(); // \"/tmp\" for most *nix platforms\n ```\n\n Searches and returns string containing a writeable, platform-dependent temporary directory.\n Follows Python's [tempfile algorithm](http://docs.python.org/library/tempfile.html#tempfile.tempdir).\n",
  "test": "\n  test(expression)\n\n Available expression primaries:\n\n + `'-b', 'path'`: true if path is a block device\n + `'-c', 'path'`: true if path is a character device\n + `'-d', 'path'`: true if path is a directory\n + `'-e', 'path'`: true if path exists\n + `'-f', 'path'`: true if path is a regular file\n + `'-L', 'path'`: true if path is a symbolic link\n + `'-p', 'path'`: true if path is a pipe (FIFO)\n + `'-S', 'path'`: true if path is a socket\n\n Examples:\n\n ```javascript\n if (test('-d', path)) { /* do something with dir */ };\n if (!test('-f', path)) continue; // skip if it's a regular file\n ```\n\n Evaluates `expression` using the available primaries and returns corresponding value.\n",
  "to": "\n  ShellString.prototype.to(file)\n\n Examples:\n\n ```javascript\n cat('input.txt').to('output.txt');\n ```\n\n Analogous to the redirection operator `>` in Unix, but works with\n `ShellStrings` (such as those returned by `cat`, `grep`, etc.). _Like Unix\n redirections, `to()` will overwrite any existing file!_\n",
  "toEnd": "\n  ShellString.prototype.toEnd(file)\n\n Examples:\n\n ```javascript\n cat('input.txt').toEnd('output.txt');\n ```\n\n Analogous to the redirect-and-append operator `>>` in Unix, but works with\n `ShellStrings` (such as those returned by `cat`, `grep`, etc.).\n",
  "touch": "\n  touch([options,] file [, file ...])\n  touch([options,] file_array)\n\n Available options:\n\n + `-a`: Change only the access time\n + `-c`: Do not create any files\n + `-m`: Change only the modification time\n + `-d DATE`: Parse `DATE` and use it instead of current time\n + `-r FILE`: Use `FILE`'s times instead of current time\n\n Examples:\n\n ```javascript\n touch('source.js');\n touch('-c', '/path/to/some/dir/source.js');\n touch({ '-r': FILE }, '/path/to/some/dir/source.js');\n ```\n\n Update the access and modification times of each `FILE` to the current time.\n A `FILE` argument that does not exist is created empty, unless `-c` is supplied.\n This is a partial implementation of [`touch(1)`](http://linux.die.net/man/1/touch).\n",
  "uniq": "\n  uniq([options,] [input, [output]])\n\n Available options:\n\n + `-i`: Ignore case while comparing\n + `-c`: Prefix lines by the number of occurrences\n + `-d`: Only print duplicate lines, one for each group of identical lines\n\n Examples:\n\n ```javascript\n uniq('foo.txt');\n uniq('-i', 'foo.txt');\n uniq('-cd', 'foo.txt', 'bar.txt');\n ```\n\n Filter adjacent matching lines from `input`.\n",
  "which": "\n  which(command)\n\n Examples:\n\n ```javascript\n var nodeExec = which('node');\n ```\n\n Searches for `command` in the system's `PATH`. On Windows, this uses the\n `PATHEXT` variable to append the extension if it's not already executable.\n Returns string containing the absolute path to `command`.\n"
}
